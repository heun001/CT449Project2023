{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-md-12\"\n};\nconst _hoisted_4 = {\n  class: \"table table-hover\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Type\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Actions\")])], -1 /* HOISTED */);\nconst _hoisted_6 = [\"textContent\"];\nconst _hoisted_7 = [\"textContent\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" heading \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" show all notifications \"), _createElementVNode(\"table\", _hoisted_4, [_hoisted_5, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.notifications, notification => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: notification._id\n    }, [_createCommentVNode(\" show type of notification \"), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      textContent: _toDisplayString(notification.type)\n    }, null, 8 /* PROPS */, _hoisted_6), _createCommentVNode(\" if type is group invite, then we also show the name of group \"), notification.type == 'group_invite' ? (_openBlock(), _createElementBlock(\"span\", {\n      key: 0,\n      textContent: _toDisplayString(notification.group.name)\n    }, null, 8 /* PROPS */, _hoisted_7)) : _createCommentVNode(\"v-if\", true)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","$options","notifications","notification","key","_id","_toDisplayString","type","group","name"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\NotificationsComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <!-- heading -->\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <!-- show all notifications -->\r\n                <table class=\"table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Type</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        <tr v-for=\"notification in notifications\" v-bind:key=\"notification._id\">\r\n                            <!-- show type of notification -->\r\n                            <td>\r\n                                <span v-text=\"notification.type\"></span>\r\n\r\n                                <!-- if type is group invite, then we also show the name of group -->\r\n                                <template v-if=\"notification.type == 'group_invite'\">\r\n                                    <span v-text=\"notification.group.name\"></span>\r\n                                </template>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n \r\n<script>\r\n\r\nimport axios from \"axios\"\r\nimport swal from \"sweetalert2\"\r\nimport store from \"../vuex/store\"\r\n\r\nexport default {\r\n    // create computed property for all notifications\r\n    computed: {\r\n        notifications() {\r\n            return store.getters.getNotifications.reverse()\r\n        }\r\n    },\r\n    methods: {\r\n        // method to mark all notifications as read\r\n        markAsRead: async function () {\r\n            const response = await axios.post(\r\n                this.$apiURL + \"/markNotificationsAsRead\",\r\n                null,\r\n                {\r\n                    headers: this.$headers\r\n                }\r\n            )\r\n\r\n            if (response.data.status == \"success\") {\r\n                // set the unread notifications to zero\r\n                store.commit(\"setUnreadNotifications\", 0)\r\n            }\r\n        },\r\n    },\r\n\r\n    // on page loaded, mark all notifications as read\r\n    mounted: function () {\r\n        this.markAsRead()\r\n    },\r\n}\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;;EAEbA,KAAK,EAAC;AAAK;;EACPA,KAAK,EAAC;AAAW;;EAEXA,KAAK,EAAC;AAAmB;gCAC5BC,mBAAA,CAKQ,gB,aAJJA,mBAAA,CAGK,a,aAFDA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAgB,YAAZ,SAAO,E;;;;uBATnCC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BFC,mBAAA,aAAgB,EAChBH,mBAAA,CA0BM,OA1BNI,UA0BM,GAzBFJ,mBAAA,CAwBM,OAxBNK,UAwBM,GAvBFF,mBAAA,4BAA+B,EAC/BH,mBAAA,CAqBQ,SArBRM,UAqBQ,GApBJC,UAKQ,EAERP,mBAAA,CAYQ,iB,kBAXJC,mBAAA,CAUKO,SAAA,QAAAC,WAAA,CAVsBC,QAAA,CAAAC,aAAa,EAA7BC,YAAY;yBAAvBX,mBAAA,CAUK;MAV4CY,GAAG,EAAED,YAAY,CAACE;QAC/DX,mBAAA,+BAAkC,EAClCH,mBAAA,CAOK,aANDA,mBAAA,CAAwC;mBAAlCe,gBAAA,CAAQH,YAAY,CAACI,IAAI;yCAE/Bb,mBAAA,kEAAqE,EACrDS,YAAY,CAACI,IAAI,sB,cAC7Bf,mBAAA,CAA8C;;mBAAxCc,gBAAA,CAAQH,YAAY,CAACK,KAAK,CAACC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}