{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"../../public/assets/css/chat.css\";\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nexport default {\n  data() {\n    return {\n      message: \"\",\n      page: 0,\n      email: this.$route.params.email,\n      messages: [],\n      receiver: null\n    };\n  },\n  methods: {\n    getData: async function () {\n      if (this.email == null) {\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"email\", this.email);\n      formData.append(\"page\", this.page);\n      const response = await axios.post(this.$apiURL + \"/chat/fetch\", formData, {\n        headers: this.$headers\n      });\n      // console.log(response)\n\n      if (response.data.status == \"success\") {\n        for (let a = 0; a < response.data.messages.length; a++) {\n          this.messages.unshift(response.data.messages[a]);\n        }\n        this.receiver = response.data.receiver;\n        this.user = response.data.user;\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n    sendMessage: async function () {\n      const formData = new FormData();\n      formData.append(\"email\", this.email);\n      formData.append(\"message\", this.message);\n      const response = await axios.post(this.$apiURL + \"/chat/send\", formData, {\n        headers: this.$headers\n      });\n      console.log(response);\n      if (response.data.status == \"success\") {\n        this.message = \"\";\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  mounted() {\n    this.getData();\n  }\n};","map":{"version":3,"names":["axios","swal","data","message","page","email","$route","params","messages","receiver","methods","getData","formData","FormData","append","response","post","$apiURL","headers","$headers","status","a","length","unshift","user","fire","sendMessage","console","log","mounted"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\ChatComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"row clearfix\">\r\n            <div class=\"col-lg-12\">\r\n                <div class=\"card chat-app\">\r\n                    <div class=\"chat\">\r\n                        <div class=\"chat-header clearfix\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-lg-6\">\r\n                                    <a href=\"javascript:void(0);\" data-toggle=\"modal\" data-target=\"#view_info\">\r\n                                        <img src=\"https://bootdey.com/img/Content/avatar/avatar2.png\" alt=\"avatar\">\r\n                                    </a>\r\n\r\n                                    <div class=\"chat-about\">\r\n                                        <!-- receiver name goes here -->\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div class=\"col-lg-6 hidden-sm text-right text-white\">\r\n                                    <!-- attachment goes here -->\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"chat-history\">\r\n                            <ul class=\"m-b-0\">\r\n                                <li v-for=\"msg in messages\" class=\"clearfix\" v-bind:key=\"msg._id\">\r\n                                    <div\r\n                                        v-bind:class=\"'message-data ' + (user != null && user.email == msg.sender.email ? 'text-right' : '')\">\r\n                                        <span class=\"message-data-time text-white\"\r\n                                            v-text=\"getMessageTime(msg.createdAt)\"></span>\r\n                                        <img src=\"https://bootdey.com/img/Content/avatar/avatar7.png\" alt=\"avatar\"\r\n                                            style=\"width: 50px;\" />\r\n                                    </div>\r\n\r\n                                    <div\r\n                                        v-bind:class=\"'message ' + (user != null && user.email == msg.sender.email ? 'my-message float-right' : 'other-message')\">\r\n                                        <p v-text=\"msg.message\"\r\n                                            v-bind:class=\"(user != null && user.email == msg.sender.email ? 'text-right' : '')\"\r\n                                            style=\"margin-bottom: 0px;\"></p>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"chat-message clearfix\">\r\n                            <div class=\"input-group mb-0\">\r\n                                <div class=\"input-group mb-3\">\r\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"Enter text here...\"\r\n                                        v-model=\"message\" />\r\n                                    <button class=\"btn btn-primary\" v-on:click=\"sendMessage\" type=\"button\">Send</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\n\r\nimport \"../../public/assets/css/chat.css\"\r\nimport axios from \"axios\"\r\nimport swal from \"sweetalert2\"\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            message: \"\",\r\n            page: 0,\r\n            email: this.$route.params.email,\r\n\r\n            messages: [],\r\n            receiver: null,\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        getData: async function () {\r\n            if (this.email == null) {\r\n                return\r\n            }\r\n\r\n            const formData = new FormData()\r\n            formData.append(\"email\", this.email)\r\n            formData.append(\"page\", this.page)\r\n\r\n            const response = await axios.post(\r\n                this.$apiURL + \"/chat/fetch\",\r\n                formData,\r\n                {\r\n                    headers: this.$headers\r\n                }\r\n            )\r\n            // console.log(response)\r\n\r\n            if (response.data.status == \"success\") {\r\n                for (let a = 0; a < response.data.messages.length; a++) {\r\n                    this.messages.unshift(response.data.messages[a])\r\n                }\r\n                this.receiver = response.data.receiver\r\n                this.user = response.data.user\r\n\r\n        } else {\r\n            swal.fire(\"Error\", response.data.message, \"error\")\r\n        }\r\n    },\r\n\r\n    sendMessage: async function () {\r\n\r\n        const formData = new FormData()\r\n        formData.append(\"email\", this.email)\r\n        formData.append(\"message\", this.message)\r\n\r\n        const response = await axios.post(\r\n            this.$apiURL + \"/chat/send\",\r\n            formData,\r\n            {\r\n                headers: this.$headers\r\n            }\r\n        )\r\n        console.log(response)\r\n\r\n        if (response.data.status == \"success\") {\r\n            this.message = \"\"\r\n        } else {\r\n            swal.fire(\"Error\", response.data.message, \"error\")\r\n        }\r\n    },\r\n},\r\nmounted() {\r\n    this.getData()\r\n}\r\n}\r\n</script>"],"mappings":";AA+DA,OAAO,kCAAiC;AACxC,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,IAAG,MAAO,aAAY;AAE7B,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE,CAAC;MACPC,KAAK,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,KAAK;MAE/BG,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,OAAO,EAAE;IAELC,OAAO,EAAE,eAAAA,CAAA,EAAkB;MACvB,IAAI,IAAI,CAACN,KAAI,IAAK,IAAI,EAAE;QACpB;MACJ;MAEA,MAAMO,QAAO,GAAI,IAAIC,QAAQ,CAAC;MAC9BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACT,KAAK;MACnCO,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACV,IAAI;MAEjC,MAAMW,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAC7B,IAAI,CAACC,OAAM,GAAI,aAAa,EAC5BL,QAAQ,EACR;QACIM,OAAO,EAAE,IAAI,CAACC;MAClB,CACJ;MACA;;MAEA,IAAIJ,QAAQ,CAACb,IAAI,CAACkB,MAAK,IAAK,SAAS,EAAE;QACnC,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIN,QAAQ,CAACb,IAAI,CAACM,QAAQ,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;UACpD,IAAI,CAACb,QAAQ,CAACe,OAAO,CAACR,QAAQ,CAACb,IAAI,CAACM,QAAQ,CAACa,CAAC,CAAC;QACnD;QACA,IAAI,CAACZ,QAAO,GAAIM,QAAQ,CAACb,IAAI,CAACO,QAAO;QACrC,IAAI,CAACe,IAAG,GAAIT,QAAQ,CAACb,IAAI,CAACsB,IAAG;MAErC,OAAO;QACHvB,IAAI,CAACwB,IAAI,CAAC,OAAO,EAAEV,QAAQ,CAACb,IAAI,CAACC,OAAO,EAAE,OAAO;MACrD;IACJ,CAAC;IAEDuB,WAAW,EAAE,eAAAA,CAAA,EAAkB;MAE3B,MAAMd,QAAO,GAAI,IAAIC,QAAQ,CAAC;MAC9BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACT,KAAK;MACnCO,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,IAAI,CAACX,OAAO;MAEvC,MAAMY,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAC7B,IAAI,CAACC,OAAM,GAAI,YAAY,EAC3BL,QAAQ,EACR;QACIM,OAAO,EAAE,IAAI,CAACC;MAClB,CACJ;MACAQ,OAAO,CAACC,GAAG,CAACb,QAAQ;MAEpB,IAAIA,QAAQ,CAACb,IAAI,CAACkB,MAAK,IAAK,SAAS,EAAE;QACnC,IAAI,CAACjB,OAAM,GAAI,EAAC;MACpB,OAAO;QACHF,IAAI,CAACwB,IAAI,CAAC,OAAO,EAAEV,QAAQ,CAACb,IAAI,CAACC,OAAO,EAAE,OAAO;MACrD;IACJ;EACJ,CAAC;EACD0B,OAAOA,CAAA,EAAG;IACN,IAAI,CAAClB,OAAO,CAAC;EACjB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}