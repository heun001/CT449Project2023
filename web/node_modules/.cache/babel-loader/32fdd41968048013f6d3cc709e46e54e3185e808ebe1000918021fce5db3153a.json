{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport { io } from 'socket.io-client';\nimport store from '../../vuex/store';\nexport default {\n  data() {\n    return {\n      login: false,\n      user: null,\n      // get value from search input field\n      query: \"\"\n    };\n  },\n  methods: {\n    computed: {\n      unreadNotifications() {\n        return store.getters.getUnreadNotifications;\n      }\n    },\n    doSearch: async function () {\n      // create form data object and add searched query in it\n      const formData = new FormData();\n      formData.append(\"query\", this.query);\n\n      // call an AJAX to the server\n      const response = await axios.post(this.$apiURL + \"/search\",\n      // send the form data object with the request\n      formData,\n      // pass headers that contains access token\n      // so the server will know which user's contact to search\n      {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        // set the contacts array to the one received from API\n        store.commit(\"setContacts\", response.data.contacts);\n        store.commit(\"setUnreadNotifications\", response.data.unreadNotifications);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n    doLogout: async function () {\n      const response = await axios.post(this.$apiURL + \"/logout\", null, {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        // remove access token from local storage\n        localStorage.removeItem(this.$accessTokenKey);\n        window.location.href = \"/login\";\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n    getUser: async function () {\n      const self = this;\n\n      // check if user is logged in\n      if (localStorage.getItem(this.$accessTokenKey)) {\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\n          headers: this.$headers\n        }, store.commit(\"setNotifications\", response.data.user.notifications));\n        if (response.data.status == \"success\") {\n          // user is logged in\n          this.$user = response.data.user;\n          // console.log(this.$user)\n          socketIO.emit(\"connected\", this.$user.email);\n          socketIO.on(\"sendMessage\", async function (data) {\n            if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n              store.commit(\"appendMessage\", data.data);\n            }\n            let tempContacts = self.$user.contacts;\n            for (let a = 0; a < tempContacts.length; a++) {\n              if (tempContacts[a]._id == data.data.sender._id) {\n                tempContacts[a].unreadMessages++;\n              }\n            }\n            store.commit(\"setContacts\", tempContacts);\n            const Toast = swal.mixin({\n              toast: true,\n              position: 'bottom-right',\n              customClass: {\n                popup: 'colored-toast'\n              },\n              showConfirmButton: false,\n              timer: 10000,\n              timerProgressBar: true\n            });\n            await Toast.fire({\n              title: data.title\n            });\n          });\n        } else {\n          // user is logged out\n          localStorage.removeItem(this.$accessTokenKey);\n        }\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\n      } else {\n        this.login = false;\n      }\n      global.user = this.user;\n    }\n  },\n  mounted: function () {\n    this.getUser();\n    global.socketIO = io(this.$apiURL);\n  }\n};","map":{"version":3,"names":["axios","swal","io","store","data","login","user","query","methods","computed","unreadNotifications","getters","getUnreadNotifications","doSearch","formData","FormData","append","response","post","$apiURL","headers","$headers","status","commit","contacts","fire","message","doLogout","localStorage","removeItem","$accessTokenKey","window","location","href","getUser","self","getItem","notifications","$user","socketIO","emit","email","on","$route","path","sender","tempContacts","a","length","_id","unreadMessages","Toast","mixin","toast","position","customClass","popup","showConfirmButton","timer","timerProgressBar","title","global","mounted"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\layouts\\AppHeader.vue"],"sourcesContent":["<template>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\" style=\"margin-bottom: 50px;\">\n        <div class=\"container-fluid\">\n\n            <router-link class=\"navbar-brand\" to=\"/\">\n                Chat Station\n            </router-link>\n\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor01\"\n                aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                <ul class=\"navbar-nav me-auto\">\n                    <li class=\"nav-item\">\n                        <router-link class=\"nav-link active\" to=\"/\">\n                            Home\n                            <span class=\"visually-hidden\">(current)</span>\n                        </router-link>\n                    </li>\n\n                    <!-- link to show all groups, only to logged-in users -->\n                    <li class=\"nav-item\" v-if=\"login\">\n                        <router-link class=\"nav-link\" to=\"/groups\">Groups</router-link>\n                    </li>\n\n                    <li class=\"nav-item\" v-if=\"!login\">\n                        <router-link class=\"nav-link\" to=\"/login\">Login</router-link>\n                    </li>\n\n                    <li class=\"nav-item\" v-if=\"!login\">\n                        <router-link class=\"nav-link\" to=\"/register\">Register</router-link>\n                    </li>\n\n                    <li class=\"nav-item dropdown\" v-if=\"login\">\n                        <a class=\"nav-link dropdown-toggle\" href=\"#\" v-text=\"$user.name\" id=\"navbarDropdown\" role=\"button\"\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></a>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                    <li><a class=\"dropdown-item\" v-on:click=\"doLogout\" href=\"javascript:void(0);\">Logout</a></li>\n\n            </div>\n            </li>\n            </ul>\n\n            <form class=\"d-flex\" v-on:submit.prevent=\"doSearch\">\n                <input class=\"form-control me-sm-2\" type=\"text\" v-model=\"query\" placeholder=\"Search\">\n                <button class=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n        </div>\n        </div>\n    </nav>\n</template>\n<script>\n\nimport axios from \"axios\"\nimport swal from \"sweetalert2\"\nimport { io } from 'socket.io-client'\nimport store from '../../vuex/store'\nexport default {\n    data() {\n        return {\n            login: false,\n            user: null,\n\n            // get value from search input field\n            query: \"\"\n        }\n    },\n\n    methods: {\n        computed: {\n            unreadNotifications() {\n                return store.getters.getUnreadNotifications\n            }\n        },\n\n        doSearch: async function () {\n            // create form data object and add searched query in it\n            const formData = new FormData()\n            formData.append(\"query\", this.query)\n\n            // call an AJAX to the server\n            const response = await axios.post(\n                this.$apiURL + \"/search\",\n\n                // send the form data object with the request\n                formData,\n\n                // pass headers that contains access token\n                // so the server will know which user's contact to search\n                {\n                    headers: this.$headers\n                }\n            )\n\n            if (response.data.status == \"success\") {\n                // set the contacts array to the one received from API\n                store.commit(\"setContacts\", response.data.contacts)\n                store.commit(\"setUnreadNotifications\", response.data.unreadNotifications)\n\n            } else {\n                swal.fire(\"Error\", response.data.message, \"error\")\n            }\n        },\n\n\n        doLogout: async function () {\n            const response = await axios.post(\n                this.$apiURL + \"/logout\",\n                null,\n                {\n                    headers: this.$headers\n                }\n            );\n\n            if (response.data.status == \"success\") {\n                // remove access token from local storage\n                localStorage.removeItem(this.$accessTokenKey)\n\n                window.location.href = \"/login\"\n            } else {\n                swal.fire(\"Error\", response.data.message, \"error\");\n            }\n        },\n\n        getUser: async function () {\n            const self = this\n\n            // check if user is logged in\n            if (localStorage.getItem(this.$accessTokenKey)) {\n                const response = await axios.post(\n                    this.$apiURL + \"/getUser\",\n                    null,\n                    {\n                        headers: this.$headers\n                    },\n                    store.commit(\"setNotifications\", response.data.user.notifications)\n\n                )\n\n                if (response.data.status == \"success\") {\n                    // user is logged in\n                    this.$user = response.data.user\n                    // console.log(this.$user)\n                    socketIO.emit(\"connected\", this.$user.email)\n\n                    socketIO.on(\"sendMessage\", async function (data) {\n\n\n                        if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n                            store.commit(\"appendMessage\", data.data)\n                        }\n\n                        let tempContacts = self.$user.contacts\n                        for (let a = 0; a < tempContacts.length; a++) {\n                            if (tempContacts[a]._id == data.data.sender._id) {\n                                tempContacts[a].unreadMessages++\n                            }\n                        }\n                        store.commit(\"setContacts\", tempContacts)\n\n                        const Toast = swal.mixin({\n                            toast: true,\n                            position: 'bottom-right',\n                            customClass: {\n                                popup: 'colored-toast'\n                            },\n                            showConfirmButton: false,\n                            timer: 10000,\n                            timerProgressBar: true\n                        })\n\n                        await Toast.fire({\n                            title: data.title\n                        })\n                    })\n                } else {\n                    // user is logged out\n                    localStorage.removeItem(this.$accessTokenKey);\n                }\n\n                this.login = (localStorage.getItem(this.$accessTokenKey) != null);\n            } else {\n                this.login = false;\n            }\n\n            global.user = this.user\n        },\n    },\n\n    mounted: function () {\n        this.getUser();\n\n        global.socketIO = io(this.$apiURL)\n    }\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}