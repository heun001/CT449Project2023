{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"@/vuex/store\";\nexport default {\n  data() {\n    return {\n      // contacts: []\n    };\n  },\n  watch: {\n    $route: function (to, from) {\n      if (from.href.includes(\"/chat/\")) {\n        store.commit(\"setMessages\", []);\n      }\n    }\n  },\n  computed: {\n    contacts() {\n      return store.getters.getContacts;\n    }\n  },\n  methods: {\n    deleteContact: async function () {\n      const self = this;\n      const form = event.target;\n      swal.fire({\n        title: 'Are you sure?',\n        text: \"This will be removed from your contact\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, delete it!'\n      }).then(async function (result) {\n        if (result.isConfirmed) {\n          self.isDeleting = true;\n          const formData = new FormData(form);\n          const response = await axios.post(self.$apiURL + \"/contact/delete\", formData, {\n            headers: self.$headers\n          });\n          self.isDeleting = false;\n          if (response.data.status == \"success\") {\n            swal.fire('Deleted!', response.data.message, 'success');\n            const contactsArr = self.contacts;\n            for (let a = 0; a < contactsArr.length; a++) {\n              if (contactsArr[a].email == form.email.value) {\n                contactsArr.splice(a, 1);\n                break;\n              }\n            }\n            self.contacts = contactsArr;\n          } else {\n            swal.fire(\"Error\", response.data.message, \"error\");\n          }\n        }\n      });\n    },\n    getData: async function () {\n      const self = this;\n      const response = await axios.post(this.$apiURL + \"/contact/fetch\", null, {\n        headers: this.$headers\n      });\n      console.log(response);\n      if (response.data.status == \"success\") {\n        store.commit(\"setContacts\", response.data.contacts);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  mounted() {\n    this.getData();\n  }\n};","map":{"version":3,"names":["axios","swal","store","data","watch","$route","to","from","href","includes","commit","computed","contacts","getters","getContacts","methods","deleteContact","self","form","event","target","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","isDeleting","formData","FormData","response","post","$apiURL","headers","$headers","status","message","contactsArr","a","length","email","value","splice","getData","console","log","mounted"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat\\web\\src\\components\\ContactComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1 class=\"text-center text-white\">Contacts</h1>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <table class=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Email</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    <tr v-for=\"contact in contacts\" v-bind:key=\"contact._id\">\r\n                        <td>\r\n                            <span v-text=\"contact.name\"></span>\r\n                            <span v-if=\"(contact.unreadMessages > 0)\" v-text=\"' (' + contact.unreadMessages + ')'\" class=\"text-danger\"></span>\r\n\r\n                        </td>\r\n\r\n                        <td v-text=\"contact.email\"></td>\r\n\r\n                        <td style=\"display: flex;\">\r\n                            <router-link v-bind:to=\"'/chat/' + contact.email\" class=\"btn btn-primary\"\r\n                                style=\"margin-right: 10px;\">Chat</router-link>\r\n\r\n                            <form v-on:submit.prevent=\"deleteContact\">\r\n                                <input type=\"hidden\" name=\"email\" v-bind:value=\"contact.email\" required />\r\n                                <input type=\"submit\" v-bind:value=\"isDeleting ? 'Deleting...' : 'Delete'\"\r\n                                    v-bind:isDeleting=\"disabled\" class=\"btn btn-danger\" />\r\n                            </form>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\nimport axios from \"axios\"\r\nimport swal from \"sweetalert2\"\r\nimport store from \"@/vuex/store\"\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            // contacts: []\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        $route: function (to, from) {\r\n            if (from.href.includes(\"/chat/\")) {\r\n                store.commit(\"setMessages\", [])\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        contacts() {\r\n            return store.getters.getContacts\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        deleteContact: async function () {\r\n            const self = this\r\n            const form = event.target\r\n\r\n            swal.fire({\r\n                title: 'Are you sure?',\r\n                text: \"This will be removed from your contact\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes, delete it!'\r\n            }).then(async function (result) {\r\n                if (result.isConfirmed) {\r\n\r\n                    self.isDeleting = true;\r\n                    const formData = new FormData(form);\r\n\r\n                    const response = await axios.post(\r\n                        self.$apiURL + \"/contact/delete\",\r\n                        formData,\r\n                        {\r\n                            headers: self.$headers\r\n                        }\r\n                    );\r\n                    self.isDeleting = false;\r\n\r\n                    if (response.data.status == \"success\") {\r\n                        swal.fire(\r\n                            'Deleted!',\r\n                            response.data.message,\r\n                            'success'\r\n                        );\r\n\r\n                        const contactsArr = self.contacts;\r\n                        for (let a = 0; a < contactsArr.length; a++) {\r\n                            if (contactsArr[a].email == form.email.value) {\r\n                                contactsArr.splice(a, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                        self.contacts = contactsArr;\r\n                    } else {\r\n                        swal.fire(\"Error\", response.data.message, \"error\");\r\n                    }\r\n                }\r\n            })\r\n        },\r\n\r\n        getData: async function () {\r\n            const self = this\r\n\r\n            const response = await axios.post(\r\n                this.$apiURL + \"/contact/fetch\",\r\n                null,\r\n                {\r\n                    headers: this.$headers\r\n                }\r\n            )\r\n            console.log(response)\r\n\r\n            if (response.data.status == \"success\") {\r\n                store.commit(\"setContacts\", response.data.contacts)\r\n            } else {\r\n                swal.fire(\"Error\", response.data.message, \"error\");\r\n            }\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.getData()\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}