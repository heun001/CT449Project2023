{"ast":null,"code":"// axios for calling AJAX\nimport axios from \"axios\";\n\n// to show pop-up alerts\nimport swal from \"sweetalert2\";\n\n// vuex store is used to use the variables throughout the application\nimport store from \"../vuex/store\";\nexport default {\n  data() {\n    return {\n      isDeleting: false,\n      // logged-in user object\n      user: null\n    };\n  },\n  // using computed property, we can update value from anywhere in the app\n  computed: {\n    groups() {\n      return store.getters.getGroups;\n    }\n  },\n  methods: {\n    // method to invite member\n    inviteMember: function () {\n      // get vue instance\n      const self = this;\n\n      // get group _id from anchor tag\n      const _id = event.target.getAttribute(\"data-id\");\n\n      // show pop-up and ask for user email to send invitation to join group\n      swal.fire({\n        title: 'Enter user email',\n        input: 'text',\n        inputAttributes: {\n          autocapitalize: 'off'\n        },\n        showCancelButton: true,\n        confirmButtonText: 'Invite User',\n        showLoaderOnConfirm: true,\n        preConfirm: async function (email) {\n          // called when email address is entered\n\n          // attach group ID and user email to the form data object\n          const formData = new FormData();\n          formData.append(\"_id\", _id);\n          formData.append(\"email\", email);\n\n          // using fetch API send the AJAX request\n          return fetch(self.$apiURL + \"/groups/inviteMember\", {\n            method: 'POST',\n            body: formData,\n            headers: {\n              'Authorization': 'Bearer ' + localStorage.getItem(self.$accessTokenKey)\n            }\n          }).then(function (response) {\n            // called when the response is received from server\n\n            // check if the status code is not 200\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            // check if there isn't any error from server\n            return response.json().then(function (value) {\n              if (value.status == \"error\") {\n                throw new Error(value.message);\n              }\n\n              // return the success response\n              return value;\n            });\n          }).catch(function (error) {\n            // show error inside sweetalert\n            swal.showValidationMessage(`Request failed: ${error}`);\n          });\n        },\n        // disable clicking outside\n        allowOutsideClick: function () {\n          !swal.isLoading();\n        }\n      }).then(function (result) {\n        // show success response in sweetalert dialog\n        if (result.isConfirmed) {\n          swal.fire(\"Invite member\", result.value.message, \"success\");\n        }\n      });\n    },\n    // a method to fetch all groups from API\n    getData: async function (request, result) {\n      const response = await axios.post(this.$apiURL + \"/groups/fetch\", null, {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        // set logged-in user object\n        this.user = response.data.user;\n\n        // call the setGroups from vuex store\n        store.commit(\"setGroups\", response.data.groups);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  // get the data when this component is mounted\n  mounted: function () {\n    this.getData();\n  }\n};","map":{"version":3,"names":["axios","swal","store","data","isDeleting","user","computed","groups","getters","getGroups","methods","inviteMember","self","_id","event","target","getAttribute","fire","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","email","formData","FormData","append","fetch","$apiURL","method","body","headers","localStorage","getItem","$accessTokenKey","then","response","ok","Error","statusText","json","value","status","message","catch","error","showValidationMessage","allowOutsideClick","isLoading","result","isConfirmed","getData","request","post","$headers","commit","mounted"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\GroupsComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"offset-md-10 col-md-2\">\r\n                <!-- link to create group -->\r\n                <router-link class=\"btn btn-primary\" to=\"/groups/add\">Add group</router-link>\r\n            </div>\r\n            <!-- show all groups -->\r\n            <div class=\"col-md-12\">\r\n                <table class=\"table table-hover\">\r\n                    <!-- heading of table -->\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Created by</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        <!-- loop through all groups -->\r\n                        <tr v-for=\"group in groups\" v-bind:key=\"group._id\">\r\n                            <td>\r\n                                <!-- show group name -->\r\n                                <span v-text=\"group.name\"></span>\r\n                            </td>\r\n\r\n                            <!-- the admin of group -->\r\n                            <td v-text=\"group.createdBy.name\"></td>\r\n\r\n                            <td style=\"display: flex;\">\r\n\r\n                                <!-- buttons to edit and delete the group, only for group admin -->\r\n                                <template v-if=\"user != null && group.createdBy._id == user._id\">\r\n                                    <!-- edit the group -->\r\n                                    <router-link v-bind:to=\"'/groups/edit/' + group._id\" class=\"btn btn-primary\"\r\n                                        style=\"margin-right: 10px;\">Edit</router-link>\r\n\r\n                                    <!-- delete the group -->\r\n                                    <form v-on:submit.prevent=\"deleteGroup\">\r\n                                        <input type=\"hidden\" name=\"_id\" v-bind:value=\"group._id\" required />\r\n                                        <input type=\"submit\" v-bind:value=\"isDeleting ? 'Deleting...' : 'Delete'\"\r\n                                            v-bind:isDeleting=\"disabled\" class=\"btn btn-danger\" />\r\n                                    </form>\r\n                                </template>\r\n                                <!-- a button to invite member -->\r\n                                <a v-bind:data-id=\"group._id\" v-on:click.prevent=\"inviteMember\" class=\"btn btn-success\"\r\n                                    style=\"margin-left: 10px;\">Invite member</a>\r\n\r\n                            </td>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\n\r\n// axios for calling AJAX\r\nimport axios from \"axios\"\r\n\r\n// to show pop-up alerts\r\nimport swal from \"sweetalert2\"\r\n\r\n// vuex store is used to use the variables throughout the application\r\nimport store from \"../vuex/store\"\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            isDeleting: false,\r\n\r\n            // logged-in user object\r\n            user: null\r\n        }\r\n    },\r\n\r\n    // using computed property, we can update value from anywhere in the app\r\n    computed: {\r\n        groups() {\r\n            return store.getters.getGroups\r\n        }\r\n    },\r\n\r\n    methods: {\r\n\r\n        // method to invite member\r\n        inviteMember: function () {\r\n            // get vue instance\r\n            const self = this\r\n\r\n            // get group _id from anchor tag\r\n            const _id = event.target.getAttribute(\"data-id\")\r\n\r\n            // show pop-up and ask for user email to send invitation to join group\r\n            swal.fire({\r\n                title: 'Enter user email',\r\n                input: 'text',\r\n                inputAttributes: {\r\n                    autocapitalize: 'off'\r\n                },\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Invite User',\r\n                showLoaderOnConfirm: true,\r\n                preConfirm: async function (email) {\r\n\r\n                    // called when email address is entered\r\n\r\n                    // attach group ID and user email to the form data object\r\n                    const formData = new FormData()\r\n                    formData.append(\"_id\", _id)\r\n                    formData.append(\"email\", email)\r\n\r\n                    // using fetch API send the AJAX request\r\n                    return fetch(self.$apiURL + \"/groups/inviteMember\", {\r\n                        method: 'POST',\r\n                        body: formData,\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem(self.$accessTokenKey)\r\n                        }\r\n                    })\r\n                        .then(function (response) {\r\n                            // called when the response is received from server\r\n\r\n                            // check if the status code is not 200\r\n                            if (!response.ok) {\r\n                                throw new Error(response.statusText)\r\n                            }\r\n\r\n                            // check if there isn't any error from server\r\n                            return response.json().then(function (value) {\r\n                                if (value.status == \"error\") {\r\n                                    throw new Error(value.message)\r\n                                }\r\n\r\n                                // return the success response\r\n                                return value\r\n                            })\r\n                        })\r\n                        .catch(function (error) {\r\n                            // show error inside sweetalert\r\n                            swal.showValidationMessage(`Request failed: ${error}`)\r\n                        })\r\n                },\r\n                // disable clicking outside\r\n                allowOutsideClick: function () {\r\n                    !swal.isLoading()\r\n                }\r\n            }).then(function (result) {\r\n                // show success response in sweetalert dialog\r\n                if (result.isConfirmed) {\r\n                    swal.fire(\"Invite member\", result.value.message, \"success\")\r\n                }\r\n            })\r\n        },\r\n\r\n        // a method to fetch all groups from API\r\n        getData: async function (request, result) {\r\n            const response = await axios.post(\r\n                this.$apiURL + \"/groups/fetch\",\r\n                null,\r\n                {\r\n                    headers: this.$headers\r\n                }\r\n            )\r\n\r\n            if (response.data.status == \"success\") {\r\n                // set logged-in user object\r\n                this.user = response.data.user\r\n\r\n                // call the setGroups from vuex store\r\n                store.commit(\"setGroups\", response.data.groups)\r\n            } else {\r\n                swal.fire(\"Error\", response.data.message, \"error\");\r\n            }\r\n        }\r\n    },\r\n\r\n    // get the data when this component is mounted\r\n    mounted: function () {\r\n        this.getData()\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}