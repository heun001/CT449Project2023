{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"../vuex/store\";\nexport default {\n  date() {\n    return {\n      isDeleting: false\n    };\n  },\n  methods: {\n    // method to mark all notifications as read\n    markAsRead: async function () {\n      const response = await axios.post(this.$apiURL + \"/markNotificationsAsRead\", null, {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        // update in local array\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          tempNotifications[a].isRead = true;\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n\n        // set the unread notifications to zero\n        store.commit(\"setUnreadNotifications\", 0);\n      }\n    },\n    // method to delete the notification\n    deleteNotification: async function () {\n      const form = event.target;\n      const _id = form._id.value;\n      const formData = new FormData(form);\n      this.isDeleting = true;\n      const response = await axios.post(this.$apiURL + \"/deleteNotification\", formData, {\n        headers: this.$headers\n      });\n      this.isDeleting = false;\n      if (response.data.status == \"success\") {\n        // remove from local array\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          if (tempNotifications[a]._id == _id) {\n            tempNotifications.splice(a, 1);\n            break;\n          }\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  // on page loaded, mark all notifications as read\n  mounted: function () {\n    this.markAsRead();\n  },\n  // create computed property for all notifications\n  computed: {\n    notifications() {\n      return store.getters.getNotifications.reverse();\n    }\n  }\n};","map":{"version":3,"names":["axios","swal","store","date","isDeleting","methods","markAsRead","response","post","$apiURL","headers","$headers","data","status","tempNotifications","getters","getNotifications","a","length","isRead","commit","deleteNotification","form","event","target","_id","value","formData","FormData","splice","fire","message","mounted","computed","notifications","reverse"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\NotificationsComponent.vue"],"sourcesContent":["<template>\n\t<div class=\"container\" style=\"margin-top: 50px;\">\n\t\t<!-- heading -->\n\t\t<div class=\"row\">\n\t        <div class=\"col-md-12\">\n\t            <h1 class=\"text-center\">Notifications</h1>\n\t        </div>\n\t    </div>\n\t    \n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<!-- show all notifications -->\n\t\t\t\t<table class=\"table table-hover\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr v-for=\"notification in notifications\" v-bind:key=\"notification._id\">\n\t\t\t\t\t\t\t<!-- show type of notification -->\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span v-text=\"notification.type\"></span>&nbsp;\n\n\t\t\t\t\t\t\t\t<!-- if type is group invite, then we also show the name of group -->\n\t\t\t\t\t\t\t\t<template v-if=\"notification.type == 'group_invite'\">\n\t\t\t\t\t\t\t\t\t<span v-text=\"notification.group.name\"></span>\n\t\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t<!-- a button to delete the notification -->\n\t\t\t\t\t\t\t<td style=\"display: flex;\">\n\t\t\t\t\t\t\t\t<form v-on:submit.prevent=\"deleteNotification\">\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"_id\" v-bind:value=\"notification._id\" required />\n\t\t\t\t\t\t\t\t\t<input type=\"submit\" v-bind:value=\"isDeleting ? 'Deleting...' : 'Delete'\" v-bind:isDeleting=\"disabled\" class=\"btn btn-danger\" />\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\n\timport axios from \"axios\"\n\timport swal from \"sweetalert2\"\n\timport store from \"../vuex/store\"\n\n\texport default {\n\n\t\tdate() {\n\t\t\treturn {\n\t\t\t\tisDeleting: false\n\t\t\t}\n\t\t},\n\n\t\tmethods: {\n\t\t\t// method to mark all notifications as read\n\t\t\tmarkAsRead: async function () {\n\t\t\t\tconst response = await axios.post(\n\t\t\t\t\tthis.$apiURL + \"/markNotificationsAsRead\",\n\t\t\t\t\tnull,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: this.$headers\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\tif (response.data.status == \"success\") {\n\t\t\t\t\t// update in local array\n\t\t\t\t\tconst tempNotifications = store.getters.getNotifications\n\t\t\t\t\tfor (let a = 0; a < tempNotifications.length; a++) {\n\t\t\t\t\t\ttempNotifications[a].isRead = true\n\t\t\t\t\t}\n\t\t\t\t\tstore.commit(\"setNotifications\", tempNotifications)\n\n\t\t\t\t\t// set the unread notifications to zero\n\t\t\t\t\tstore.commit(\"setUnreadNotifications\", 0)\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// method to delete the notification\n\t\t\tdeleteNotification: async function () {\n\t\t\t\tconst form = event.target\n\t\t\t\tconst _id = form._id.value\n\t\t\t\tconst formData = new FormData(form)\n\n\t\t\t\tthis.isDeleting = true\n\n\t\t\t\tconst response = await axios.post(\n\t\t\t\t\tthis.$apiURL + \"/deleteNotification\",\n\t\t\t\t\tformData,\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: this.$headers\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tthis.isDeleting = false\n\n\t\t\t\tif (response.data.status == \"success\") {\n\t\t\t\t\t// remove from local array\n\t\t\t\t\tconst tempNotifications = store.getters.getNotifications\n\t\t\t\t\tfor (let a = 0; a < tempNotifications.length; a++) {\n\t\t\t\t\t\tif (tempNotifications[a]._id == _id) {\n\t\t\t\t\t\t\ttempNotifications.splice(a, 1)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstore.commit(\"setNotifications\", tempNotifications)\n\t\t\t\t} else {\n\t\t\t\t\tswal.fire(\"Error\", response.data.message, \"error\");\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\n\t\t// on page loaded, mark all notifications as read\n\t\tmounted: function () {\n\t\t\tthis.markAsRead()\n\t\t},\n\n\t\t// create computed property for all notifications\n\t    computed: {\n\t\t\tnotifications() {\n\t\t\t\treturn store.getters.getNotifications.reverse()\n\t\t\t}\n\t\t}\n\t}\n</script>"],"mappings":"AAiDC,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,IAAG,MAAO,aAAY;AAC7B,OAAOC,KAAI,MAAO,eAAc;AAEhC,eAAe;EAEdC,IAAIA,CAAA,EAAG;IACN,OAAO;MACNC,UAAU,EAAE;IACb;EACD,CAAC;EAEDC,OAAO,EAAE;IACR;IACAC,UAAU,EAAE,eAAAA,CAAA,EAAkB;MAC7B,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAI,CAChC,IAAI,CAACC,OAAM,GAAI,0BAA0B,EACzC,IAAI,EACJ;QACCC,OAAO,EAAE,IAAI,CAACC;MACf,CACD;MAEA,IAAIJ,QAAQ,CAACK,IAAI,CAACC,MAAK,IAAK,SAAS,EAAE;QACtC;QACA,MAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAO,CAACC,gBAAe;QACvD,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,iBAAiB,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UAClDH,iBAAiB,CAACG,CAAC,CAAC,CAACE,MAAK,GAAI,IAAG;QAClC;QACAjB,KAAK,CAACkB,MAAM,CAAC,kBAAkB,EAAEN,iBAAiB;;QAElD;QACAZ,KAAK,CAACkB,MAAM,CAAC,wBAAwB,EAAE,CAAC;MACzC;IACD,CAAC;IAED;IACAC,kBAAkB,EAAE,eAAAA,CAAA,EAAkB;MACrC,MAAMC,IAAG,GAAIC,KAAK,CAACC,MAAK;MACxB,MAAMC,GAAE,GAAIH,IAAI,CAACG,GAAG,CAACC,KAAI;MACzB,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAACN,IAAI;MAElC,IAAI,CAAClB,UAAS,GAAI,IAAG;MAErB,MAAMG,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAI,CAChC,IAAI,CAACC,OAAM,GAAI,qBAAqB,EACpCkB,QAAQ,EACR;QACCjB,OAAO,EAAE,IAAI,CAACC;MACf,CACD;MACA,IAAI,CAACP,UAAS,GAAI,KAAI;MAEtB,IAAIG,QAAQ,CAACK,IAAI,CAACC,MAAK,IAAK,SAAS,EAAE;QACtC;QACA,MAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAO,CAACC,gBAAe;QACvD,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,iBAAiB,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UAClD,IAAIH,iBAAiB,CAACG,CAAC,CAAC,CAACQ,GAAE,IAAKA,GAAG,EAAE;YACpCX,iBAAiB,CAACe,MAAM,CAACZ,CAAC,EAAE,CAAC;YAC7B;UACD;QACD;QACAf,KAAK,CAACkB,MAAM,CAAC,kBAAkB,EAAEN,iBAAiB;MACnD,OAAO;QACNb,IAAI,CAAC6B,IAAI,CAAC,OAAO,EAAEvB,QAAQ,CAACK,IAAI,CAACmB,OAAO,EAAE,OAAO,CAAC;MACnD;IACD;EACD,CAAC;EAED;EACAC,OAAO,EAAE,SAAAA,CAAA,EAAY;IACpB,IAAI,CAAC1B,UAAU,CAAC;EACjB,CAAC;EAED;EACG2B,QAAQ,EAAE;IACZC,aAAaA,CAAA,EAAG;MACf,OAAOhC,KAAK,CAACa,OAAO,CAACC,gBAAgB,CAACmB,OAAO,CAAC;IAC/C;EACD;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}