{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"row\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-md-12\"\n}, [/*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"text-center text-white\"\n}, \"Notifications\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" heading \"), _hoisted_2]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2"],"sources":["D:\\2023\\2023_PTUDW\\chat-station-mevn-free\\chat-station-mevn-free\\web\\src\\components\\NotificationsComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <!-- heading -->\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <h1 class=\"text-center text-white\">Notifications</h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n \r\n<script>\r\n\r\nimport axios from \"axios\"\r\nimport swal from \"sweetalert2\"\r\nimport store from \"../vuex/store\"\r\n\r\nexport default {\r\n    // create computed property for all notifications\r\n    computed: {\r\n        notifications() {\r\n            return store.getters.getNotifications.reverse()\r\n        }\r\n    },\r\n        methods: {\r\n        // method to mark all notifications as read\r\n        markAsRead: async function () {\r\n            const response = await axios.post(\r\n                this.$apiURL + \"/markNotificationsAsRead\",\r\n                null,\r\n                {\r\n                    headers: this.$headers\r\n                }\r\n            )\r\n\r\n            if (response.data.status == \"success\") {\r\n                // set the unread notifications to zero\r\n                store.commit(\"setUnreadNotifications\", 0)\r\n            }\r\n        },\r\n    },\r\n\r\n    // on page loaded, mark all notifications as read\r\n    mounted: function () {\r\n        this.markAsRead()\r\n    },\r\n}\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;gCAElBC,mBAAA,CAIM;EAJDD,KAAK,EAAC;AAAK,I,aACZC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAW,I,aAClBC,mBAAA,CAAqD;EAAjDD,KAAK,EAAC;AAAwB,GAAC,eAAa,E;;;uBAJ5DE,mBAAA,CAOM,OAPNC,UAOM,GANFC,mBAAA,aAAgB,EAChBC,UAIM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}